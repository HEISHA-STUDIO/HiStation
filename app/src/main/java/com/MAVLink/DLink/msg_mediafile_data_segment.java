/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE MEDIAFILE_DATA_SEGMENT PACKING
package com.MAVLink.DLink;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* A segment of a transferring file.
*/
public class msg_mediafile_data_segment extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_MEDIAFILE_DATA_SEGMENT = 154;
    public static final int MAVLINK_MSG_LENGTH = 254;
    private static final long serialVersionUID = MAVLINK_MSG_ID_MEDIAFILE_DATA_SEGMENT;


      
    /**
    * The total segments of the file.
    */
    public long total;
      
    /**
    * The sequence of the current segment.
    */
    public long seq;
      
    /**
    * Index of the requested file on the target storage location.
    */
    public int index;
      
    /**
    * The size of payload.
    */
    public int len;
      
    /**
    * The storage location, SD card or the internal storage.
    */
    public short storage_location;
      
    /**
    * The type of the current request.
    */
    public short request_type;
      
    /**
    * Image data.
    */
    public byte data[] = new byte[240];
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 1;
        packet.compid = 1;
        packet.msgid = MAVLINK_MSG_ID_MEDIAFILE_DATA_SEGMENT;
              
        packet.payload.putUnsignedInt(total);
              
        packet.payload.putUnsignedInt(seq);
              
        packet.payload.putUnsignedShort(index);
              
        packet.payload.putUnsignedShort(len);
              
        packet.payload.putUnsignedByte(storage_location);
              
        packet.payload.putUnsignedByte(request_type);
              
        
        for (int i = 0; i < data.length; i++) {
            packet.payload.putByte(data[i]);
        }
                    
        
        return packet;
    }

    /**
    * Decode a mediafile_data_segment message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.total = payload.getUnsignedInt();
              
        this.seq = payload.getUnsignedInt();
              
        this.index = payload.getUnsignedShort();
              
        this.len = payload.getUnsignedShort();
              
        this.storage_location = payload.getUnsignedByte();
              
        this.request_type = payload.getUnsignedByte();
              
         
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = payload.getByte();
        }
                
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_mediafile_data_segment(){
        msgid = MAVLINK_MSG_ID_MEDIAFILE_DATA_SEGMENT;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_mediafile_data_segment(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_MEDIAFILE_DATA_SEGMENT;
        unpack(mavLinkPacket.payload);        
    }

                  
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_MEDIAFILE_DATA_SEGMENT - sysid:"+sysid+" compid:"+compid+" total:"+total+" seq:"+seq+" index:"+index+" len:"+len+" storage_location:"+storage_location+" request_type:"+request_type+" data:"+data+"";
    }
}
        