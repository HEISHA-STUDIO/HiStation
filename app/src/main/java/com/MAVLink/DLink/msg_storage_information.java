/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE STORAGE_INFORMATION PACKING
package com.MAVLink.DLink;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* Information of storages on the drone, internal storage and/or SD card.
*/
public class msg_storage_information extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_STORAGE_INFORMATION = 155;
    public static final int MAVLINK_MSG_LENGTH = 11;
    private static final long serialVersionUID = MAVLINK_MSG_ID_STORAGE_INFORMATION;


      
    /**
    * Flags of storage status, internal storage or SD card.
    */
    public int status_flags;
      
    /**
    * Total space in MB.
    */
    public int total_space_in_mb;
      
    /**
    * Remaining space in MB.
    */
    public int remaining_space_in_mb;
      
    /**
    * How many photos can be captured with remaining space.
    */
    public int available_photo_count;
      
    /**
    * Total time for recording with remaining space.
    */
    public int available_record_time_in_second;
      
    /**
    * The storage location, SD card or the internal storage.
    */
    public short storage_location;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 1;
        packet.compid = 1;
        packet.msgid = MAVLINK_MSG_ID_STORAGE_INFORMATION;
              
        packet.payload.putUnsignedShort(status_flags);
              
        packet.payload.putUnsignedShort(total_space_in_mb);
              
        packet.payload.putUnsignedShort(remaining_space_in_mb);
              
        packet.payload.putUnsignedShort(available_photo_count);
              
        packet.payload.putUnsignedShort(available_record_time_in_second);
              
        packet.payload.putUnsignedByte(storage_location);
        
        return packet;
    }

    /**
    * Decode a storage_information message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.status_flags = payload.getUnsignedShort();
              
        this.total_space_in_mb = payload.getUnsignedShort();
              
        this.remaining_space_in_mb = payload.getUnsignedShort();
              
        this.available_photo_count = payload.getUnsignedShort();
              
        this.available_record_time_in_second = payload.getUnsignedShort();
              
        this.storage_location = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_storage_information(){
        msgid = MAVLINK_MSG_ID_STORAGE_INFORMATION;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_storage_information(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_STORAGE_INFORMATION;
        unpack(mavLinkPacket.payload);        
    }

                
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_STORAGE_INFORMATION - sysid:"+sysid+" compid:"+compid+" status_flags:"+status_flags+" total_space_in_mb:"+total_space_in_mb+" remaining_space_in_mb:"+remaining_space_in_mb+" available_photo_count:"+available_photo_count+" available_record_time_in_second:"+available_record_time_in_second+" storage_location:"+storage_location+"";
    }
}
        